# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /home/arin/Desktop/googletest/ridge/googletest

# Where to find user code.
USER_DIR = /home/arin/Desktop/Ridge/cpp

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -std=c++11 -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = base_tile_unittest base_unit_unittest constants_unittest map_unittest sub_tile_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
MODELS_DIR = $(USER_DIR)/src/models
TILE_DIR = $(USER_DIR)/src/models/tiles
UNIT_DIR = $(USER_DIR)/src/models/units
TEST_DIR = $(USER_DIR)/tests

CPPFLAGS += -I$(MODELS_DIR)
CPPFLAGS += -I$(TILE_DIR)
CPPFLAGS += -I$(UNIT_DIR)
CPPFLAGS += -I$(TEST_DIR)

base_unit.o : $(UNIT_DIR)/base_unit.h \
              $(UNIT_DIR)/base_unit.cpp \
              $(MODELS_DIR)/constants.h 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNIT_DIR)/base_unit.cpp
              

base_tile.o : $(TILE_DIR)/base_tile.h \
              $(TILE_DIR)/base_tile.cpp \
              $(UNIT_DIR)/base_unit.o \
              $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TILE_DIR)/base_tile.cpp

sub_tile.o : $(TILE_DIR)/sub_tile.h \
              $(TILE_DIR)/sub_tile.cpp \
              $(TILE_DIR)/base_tile.h \
              $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TILE_DIR)/sub_tile.cpp

map.o : $(MODELS_DIR)/map.h \
              $(MODELS_DIR)/map.cpp \
              $(MODELS_DIR)/constants.h \
              $(TILE_DIR)/base_tile.h \
              $(UNIT_DIR)/base_unit.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(MODELS_DIR)/map.cpp

constants.o : $(MODELS_DIR)/constants.h \
              $(MODELS_DIR)/constants.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(MODELS_DIR)/constants.cpp

base_tile_unittest.o : $(TEST_DIR)/base_tile_unittest.cpp \
                     $(TILE_DIR)/base_tile.h \
                     $(MODELS_DIR)/constants.h \
                     $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/base_tile_unittest.cpp

sub_tile_unittest.o : $(TEST_DIR)/sub_tile_unittest.cpp \
                     $(TILE_DIR)/sub_tile.h \
                     $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/sub_tile_unittest.cpp

base_unit_unittest.o : $(TEST_DIR)/base_unit_unittest.cpp \
                     $(UNIT_DIR)/base_unit.h \
                     $(MODELS_DIR)/constants.h \
                     $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/base_unit_unittest.cpp

map_unittest.o : $(TEST_DIR)/map_unittest.cpp \
                     $(MODELS_DIR)/map.h \
                     $(MODELS_DIR)/constants.h \
                     $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/map_unittest.cpp

constants_unittest.o : $(TEST_DIR)/constants_unittest.cpp \
                     $(MODELS_DIR)/constants.h \
                     $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/constants_unittest.cpp

OBJS = base_unit.o base_tile.o constants.o map.o sub_tile.o

base_unit_unittest : $(OBJS) base_unit_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

base_tile_unittest : $(OBJS) base_tile_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

sub_tile_unittest : $(OBJS) sub_tile_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

constants_unittest : $(OBJS) constants_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

map_unittest : $(OBJS) map_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

